/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package knn;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.stream.IntStream;

/**
 *
 * @author levig
 */
public class KNN {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        int qtde_treino = 15;
        Double[][] iris = {{5.1, 3.5, 1.4, 0.2, 1.0}, {4.9, 3.0, 1.4, 0.2, 1.0}, {4.7, 3.2, 1.3, 0.2, 1.0}, {4.6, 3.1, 1.5, 0.2, 1.0}, {5.0, 3.6, 1.4, 0.2, 1.0}, {5.4, 3.9, 1.7, 0.4, 1.0}, {4.6, 3.4, 1.4, 0.3, 1.0}, {5.0, 3.4, 1.5, 0.2, 1.0}, {4.4, 2.9, 1.4, 0.2, 1.0}, {4.9, 3.1, 1.5, 0.1, 1.0}, {5.4, 3.7, 1.5, 0.2, 1.0}, {4.8, 3.4, 1.6, 0.2, 1.0}, {4.8, 3.0, 1.4, 0.1, 1.0}, {4.3, 3.0, 1.1, 0.1, 1.0}, {5.8, 4.0, 1.2, 0.2, 1.0}, {5.7, 4.4, 1.5, 0.4, 1.0}, {5.4, 3.9, 1.3, 0.4, 1.0}, {5.1, 3.5, 1.4, 0.3, 1.0}, {5.7, 3.8, 1.7, 0.3, 1.0}, {5.1, 3.8, 1.5, 0.3, 1.0}, {5.4, 3.4, 1.7, 0.2, 1.0}, {5.1, 3.7, 1.5, 0.4, 1.0}, {4.6, 3.6, 1.0, 0.2, 1.0}, {5.1, 3.3, 1.7, 0.5, 1.0}, {4.8, 3.4, 1.9, 0.2, 1.0}, {5.0, 3.0, 1.6, 0.2, 1.0}, {5.0, 3.4, 1.6, 0.4, 1.0}, {5.2, 3.5, 1.5, 0.2, 1.0}, {5.2, 3.4, 1.4, 0.2, 1.0}, {4.7, 3.2, 1.6, 0.2, 1.0}, {4.8, 3.1, 1.6, 0.2, 1.0}, {5.4, 3.4, 1.5, 0.4, 1.0}, {5.2, 4.1, 1.5, 0.1, 1.0}, {5.5, 4.2, 1.4, 0.2, 1.0}, {4.9, 3.1, 1.5, 0.1, 1.0}, {5.0, 3.2, 1.2, 0.2, 1.0}, {5.5, 3.5, 1.3, 0.2, 1.0}, {4.9, 3.1, 1.5, 0.1, 1.0}, {4.4, 3.0, 1.3, 0.2, 1.0}, {5.1, 3.4, 1.5, 0.2, 1.0}, {5.0, 3.5, 1.3, 0.3, 1.0}, {4.5, 2.3, 1.3, 0.3, 1.0}, {4.4, 3.2, 1.3, 0.2, 1.0}, {5.0, 3.5, 1.6, 0.6, 1.0}, {5.1, 3.8, 1.9, 0.4, 1.0}, {4.8, 3.0, 1.4, 0.3, 1.0}, {5.1, 3.8, 1.6, 0.2, 1.0}, {4.6, 3.2, 1.4, 0.2, 1.0}, {5.3, 3.7, 1.5, 0.2, 1.0}, {5.0, 3.3, 1.4, 0.2, 1.0}, {7.0, 3.2, 4.7, 1.4, 2.0}, {6.4, 3.2, 4.5, 1.5, 2.0}, {6.9, 3.1, 4.9, 1.5, 2.0}, {5.5, 2.3, 4.0, 1.3, 2.0}, {6.5, 2.8, 4.6, 1.5, 2.0}, {5.7, 2.8, 4.5, 1.3, 2.0}, {6.3, 3.3, 4.7, 1.6, 2.0}, {4.9, 2.4, 3.3, 1.0, 2.0}, {6.6, 2.9, 4.6, 1.3, 2.0}, {5.2, 2.7, 3.9, 1.4, 2.0}, {5.0, 2.0, 3.5, 1.0, 2.0}, {5.9, 3.0, 4.2, 1.5, 2.0}, {6.0, 2.2, 4.0, 1.0, 2.0}, {6.1, 2.9, 4.7, 1.4, 2.0}, {5.6, 2.9, 3.6, 1.3, 2.0}, {6.7, 3.1, 4.4, 1.4, 2.0}, {5.6, 3.0, 4.5, 1.5, 2.0}, {5.8, 2.7, 4.1, 1.0, 2.0}, {6.2, 2.2, 4.5, 1.5, 2.0}, {5.6, 2.5, 3.9, 1.1, 2.0}, {5.9, 3.2, 4.8, 1.8, 2.0}, {6.1, 2.8, 4.0, 1.3, 2.0}, {6.3, 2.5, 4.9, 1.5, 2.0}, {6.1, 2.8, 4.7, 1.2, 2.0}, {6.4, 2.9, 4.3, 1.3, 2.0}, {6.6, 3.0, 4.4, 1.4, 2.0}, {6.8, 2.8, 4.8, 1.4, 2.0}, {6.7, 3.0, 5.0, 1.7, 2.0}, {6.0, 2.9, 4.5, 1.5, 2.0}, {5.7, 2.6, 3.5, 1.0, 2.0}, {5.5, 2.4, 3.8, 1.1, 2.0}, {5.5, 2.4, 3.7, 1.0, 2.0}, {5.8, 2.7, 3.9, 1.2, 2.0}, {6.0, 2.7, 5.1, 1.6, 2.0}, {5.4, 3.0, 4.5, 1.5, 2.0}, {6.0, 3.4, 4.5, 1.6, 2.0}, {6.7, 3.1, 4.7, 1.5, 2.0}, {6.3, 2.3, 4.4, 1.3, 2.0}, {5.6, 3.0, 4.1, 1.3, 2.0}, {5.5, 2.5, 4.0, 1.3, 2.0}, {5.5, 2.6, 4.4, 1.2, 2.0}, {6.1, 3.0, 4.6, 1.4, 2.0}, {5.8, 2.6, 4.0, 1.2, 2.0}, {5.0, 2.3, 3.3, 1.0, 2.0}, {5.6, 2.7, 4.2, 1.3, 2.0}, {5.7, 3.0, 4.2, 1.2, 2.0}, {5.7, 2.9, 4.2, 1.3, 2.0}, {6.2, 2.9, 4.3, 1.3, 2.0}, {5.1, 2.5, 3.0, 1.1, 2.0}, {5.7, 2.8, 4.1, 1.3, 2.0}, {6.3, 3.3, 6.0, 2.5, 3.0}, {5.8, 2.7, 5.1, 1.9, 3.0}, {7.1, 3.0, 5.9, 2.1, 3.0}, {6.3, 2.9, 5.6, 1.8, 3.0}, {6.5, 3.0, 5.8, 2.2, 3.0}, {7.6, 3.0, 6.6, 2.1, 3.0}, {4.9, 2.5, 4.5, 1.7, 3.0}, {7.3, 2.9, 6.3, 1.8, 3.0}, {6.7, 2.5, 5.8, 1.8, 3.0}, {7.2, 3.6, 6.1, 2.5, 3.0}, {6.5, 3.2, 5.1, 2.0, 3.0}, {6.4, 2.7, 5.3, 1.9, 3.0}, {6.8, 3.0, 5.5, 2.1, 3.0}, {5.7, 2.5, 5.0, 2.0, 3.0}, {5.8, 2.8, 5.1, 2.4, 3.0}, {6.4, 3.2, 5.3, 2.3, 3.0}, {6.5, 3.0, 5.5, 1.8, 3.0}, {7.7, 3.8, 6.7, 2.2, 3.0}, {7.7, 2.6, 6.9, 2.3, 3.0}, {6.0, 2.2, 5.0, 1.5, 3.0}, {6.9, 3.2, 5.7, 2.3, 3.0}, {5.6, 2.8, 4.9, 2.0, 3.0}, {7.7, 2.8, 6.7, 2.0, 3.0}, {6.3, 2.7, 4.9, 1.8, 3.0}, {6.7, 3.3, 5.7, 2.1, 3.0}, {7.2, 3.2, 6.0, 1.8, 3.0}, {6.2, 2.8, 4.8, 1.8, 3.0}, {6.1, 3.0, 4.9, 1.8, 3.0}, {6.4, 2.8, 5.6, 2.1, 3.0}, {7.2, 3.0, 5.8, 1.6, 3.0}, {7.4, 2.8, 6.1, 1.9, 3.0}, {7.9, 3.8, 6.4, 2.0, 3.0}, {6.4, 2.8, 5.6, 2.2, 3.0}, {6.3, 2.8, 5.1, 1.5, 3.0}, {6.1, 2.6, 5.6, 1.4, 3.0}, {7.7, 3.0, 6.1, 2.3, 3.0}, {6.3, 3.4, 5.6, 2.4, 3.0}, {6.4, 3.1, 5.5, 1.8, 3.0}, {6.0, 3.0, 4.8, 1.8, 3.0}, {6.9, 3.1, 5.4, 2.1, 3.0}, {6.7, 3.1, 5.6, 2.4, 3.0}, {6.9, 3.1, 5.1, 2.3, 3.0}, {5.8, 2.7, 5.1, 1.9, 3.0}, {6.8, 3.2, 5.9, 2.3, 3.0}, {6.7, 3.3, 5.7, 2.5, 3.0}, {6.7, 3.0, 5.2, 2.3, 3.0}, {6.3, 2.5, 5.0, 1.9, 3.0}, {6.5, 3.0, 5.2, 2.0, 3.0}, {6.2, 3.4, 5.4, 2.3, 3.0}, {5.9, 3.0, 5.1, 1.8, 3.0}};
        Double[][] iris2 = {{5.1,3.5,1.4,0.2,1.0}, {7.0,3.2,4.7,1.4,2.0}, {6.3,3.3,6.0,2.5,3.0}, {4.9,3.0,1.4,0.2,1.0}, {5.7,2.8,4.1,1.3,2.0}, {5.8,2.7,5.1,1.9,3.0}, {4.7,3.2,1.3,0.2,1.0}, {5.1,2.5,3.0,1.1,2.0}, {7.1,3.0,5.9,2.1,3.0}, {4.6,3.1,1.5,0.2,1.0}, {5.8,2.6,4.0,1.2,2.0}, {6.3,2.9,5.6,1.8,3.0}, {5.0,3.6,1.4,0.2,1.0}, {6.1,3.0,4.6,1.4,2.0}, {6.5,3.0,5.8,2.2,3.0}, {5.4,3.9,1.7,0.4,1.0}, {5.5,2.6,4.4,1.2,2.0}, {7.6,3.0,6.6,2.1,3.0}, {4.6,3.4,1.4,0.3,1.0}, {5.5,2.5,4.0,1.3,2.0}, {4.9,2.5,4.5,1.7,3.0}, {5.0,3.4,1.5,0.2,1.0}, {5.6,3.0,4.1,1.3,2.0}, {7.3,2.9,6.3,1.8,3.0}, {5.1,3.5,1.4,0.3,1.0}, {6.3,2.3,4.4,1.3,2.0}, {6.7,2.5,5.8,1.8,3.0}, {5.7,3.8,1.7,0.3,1.0}, {6.7,3.1,4.7,1.5,2.0}, {7.2,3.6,6.1,2.5,3.0}, {5.1,3.8,1.5,0.3,1.0}, {6.0,3.4,4.5,1.6,2.0}, {6.5,3.2,5.1,2.0,3.0}, {5.4,3.4,1.7,0.2,1.0}, {5.4,3.0,4.5,1.5,2.0}, {6.4,2.7,5.3,1.9,3.0}, {5.1,3.7,1.5,0.4,1.0}, {6.0,2.7,5.1,1.6,2.0}, {6.8,3.0,5.5,2.1,3.0}, {4.6,3.6,1.0,0.2,1.0}, {5.8,2.7,3.9,1.2,2.0}, {6.0,2.2,5.0,1.5,3.0}, {5.1,3.3,1.7,0.5,1.0}, {5.5,2.4,3.7,1.0,2.0}, {6.9,3.2,5.7,2.3,3.0}, {4.8,3.4,1.9,0.2,1.0}, {5.5,2.4,3.8,1.1,2.0}, {5.6,2.8,4.9,2.0,3.0}, {5.0,3.0,1.6,0.2,1.0}, {5.7,2.6,3.5,1.0,2.0}, {7.7,2.8,6.7,2.0,3.0}, {5.0,3.4,1.6,0.4,1.0}, {6.0,2.9,4.5,1.5,2.0}, {6.3,2.7,4.9,1.8,3.0}, {5.2,3.5,1.5,0.2,1.0}, {6.7,3.0,5.0,1.7,2.0}, {6.7,3.3,5.7,2.1,3.0}, {5.2,3.4,1.4,0.2,1.0}, {5.6,3.0,4.5,1.5,2.0}, {7.2,3.2,6.0,1.8,3.0}, {4.7,3.2,1.6,0.2,1.0}, {6.7,3.1,4.4,1.4,2.0}, {6.2,2.8,4.8,1.8,3.0}, {4.8,3.1,1.6,0.2,1.0}, {5.6,2.9,3.6,1.3,2.0}, {6.1,2.6,5.6,1.4,3.0}, {5.4,3.4,1.5,0.4,1.0}, {6.1,2.9,4.7,1.4,2.0}, {7.7,3.0,6.1,2.3,3.0}, {4.4,3.0,1.3,0.2,1.0}, {6.0,2.2,4.0,1.0,2.0}, {6.3,3.4,5.6,2.4,3.0}, {5.1,3.4,1.5,0.2,1.0}, {5.9,3.0,4.2,1.5,2.0}, {6.4,3.1,5.5,1.8,3.0}, {5.0,3.5,1.3,0.3,1.0}, {5.0,2.0,3.5,1.0,2.0}, {6.0,3.0,4.8,1.8,3.0}, {4.5,2.3,1.3,0.3,1.0}, {5.2,2.7,3.9,1.4,2.0}, {6.9,3.1,5.4,2.1,3.0}, {4.4,3.2,1.3,0.2,1.0}, {6.6,2.9,4.6,1.3,2.0}, {6.7,3.1,5.6,2.4,3.0}, {5.0,3.5,1.6,0.6,1.0}, {4.9,2.4,3.3,1.0,2.0}, {6.8,3.2,5.9,2.3,3.0}, {5.1,3.8,1.9,0.4,1.0}, {6.3,3.3,4.7,1.6,2.0}, {6.7,3.3,5.7,2.5,3.0}, {4.8,3.0,1.4,0.3,1.0}, {5.7,2.8,4.5,1.3,2.0}, {6.7,3.0,5.2,2.3,3.0}, {5.1,3.8,1.6,0.2,1.0}, {6.5,2.8,4.6,1.5,2.0}, {6.3,2.5,5.0,1.9,3.0}, {4.6,3.2,1.4,0.2,1.0}, {5.5,2.3,4.0,1.3,2.0}, {6.5,3.0,5.2,2.0,3.0}, {5.3,3.7,1.5,0.2,1.0}, {6.9,3.1,4.9,1.5,2.0}, {6.2,3.4,5.4,2.3,3.0}, {5.0,3.3,1.4,0.2,1.0}, {6.4,3.2,4.5,1.5,2.0}, {5.9,3.0,5.1,1.8,3.0}, {5.2,4.1,1.5,0.1,1.0}, {6.1,2.8,4.0,1.3,2.0}, {6.1,3.0,4.9,1.8,3.0}, {5.5,4.2,1.4,0.2,1.0}, {5.6,2.5,3.9,1.1,2.0}, {7.2,3.0,5.8,1.6,3.0}, {4.9,3.1,1.5,0.1,1.0}, {6.2,2.2,4.5,1.5,2.0}, {7.4,2.8,6.1,1.9,3.0}, {5.0,3.2,1.2,0.2,1.0}, {5.8,2.7,4.1,1.0,2.0}, {7.9,3.8,6.4,2.0,3.0}, {5.5,3.5,1.3,0.2,1.0}, {6.2,2.9,4.3,1.3,2.0}, {6.4,2.8,5.6,2.2,3.0}, {4.9,3.1,1.5,0.1,1.0}, {5.7,2.9,4.2,1.3,2.0}, {6.3,2.8,5.1,1.5,3.0}, {4.4,2.9,1.4,0.2,1.0}, {5.7,3.0,4.2,1.2,2.0}, {5.7,2.5,5.0,2.0,3.0}, {4.9,3.1,1.5,0.1,1.0}, {5.6,2.7,4.2,1.3,2.0}, {5.8,2.8,5.1,2.4,3.0}, {5.4,3.7,1.5,0.2,1.0}, {5.0,2.3,3.3,1.0,2.0}, {6.4,3.2,5.3,2.3,3.0}, {4.8,3.4,1.6,0.2,1.0}, {6.8,2.8,4.8,1.4,2.0}, {6.5,3.0,5.5,1.8,3.0}, {4.8,3.0,1.4,0.1,1.0}, {6.6,3.0,4.4,1.4,2.0}, {7.7,3.8,6.7,2.2,3.0}, {4.3,3.0,1.1,0.1,1.0}, {6.4,2.9,4.3,1.3,2.0}, {7.7,2.6,6.9,2.3,3.0}, {5.8,4.0,1.2,0.2,1.0}, {6.1,2.8,4.7,1.2,2.0}, {6.9,3.1,5.1,2.3,3.0}, {5.7,4.4,1.5,0.4,1.0}, {5.9,3.2,4.8,1.8,2.0}, {6.4,2.8,5.6,2.1,3.0}, {5.4,3.9,1.3,0.4,1.0}, {6.3,2.5,4.9,1.5,2.0}, {5.8,2.7,5.1,1.9,3.0}};
        int teste_classe[];
        int qtde_acrt = 0;
        ArrayList<Integer> qtde_acrt_classe = new ArrayList<>();
        int acrt = 0;
        double distancias[];
        Double[][] ind_treina;
        Double[] ind_teste = new Double[5];
        double classe = 0;
        int qtde_teste = 150 - qtde_treino;
        int k = 0;
        double classe_obtida;
        
        for (int n = 0; n < 3; n++) {
            while (qtde_treino < 150) {
                ind_treina = new Double[qtde_treino][4];
                for (int i = 0; i < qtde_treino; i++) {
                    ind_treina = iris;
                }
                for (int i = 0; i < qtde_teste; i++){
                    ind_teste = iris[i];
                }
                for (int i = 0; i < qtde_teste; i++){
                    classe = iris[i][4];
                    classe_obtida = classificarAmostra(ind_treina, ind_teste);
                    if(classe == classe_obtida){
                        acrt++;
                    }
                }
                shuffleArray(iris);
                System.out.println("Total de acertos: " + acrt +  " de " + (qtde_teste ));
                qtde_acrt += acrt;
                acrt = 0;
                qtde_treino += 15;
                qtde_teste = 150 - qtde_treino;
            }
            qtde_treino = 15;
            qtde_teste = 150 - qtde_treino;
            qtde_acrt_classe.add(qtde_acrt);
            qtde_acrt = 0;
        }
    }
    private static double distanciaAB(Double[] a, Double[] b){
        double result = 0;
        for(int i = 0; i < 4; i++) {
            result += Math.pow((a[i] - b[i]), 2);
        }
        result = Math.sqrt(result);
        return result;
    }
    public static double classificarAmostra(Double[][] a, Double[] b){
        int tam = a.length;
        double dist;
        Double dist_ind[] = new Double[tam];
        for (int i = 0; i < tam; i++) {
            dist = distanciaAB(a[i], b);
            dist_ind[i] = dist;       
//            System.out.println("Dist " + dist_ind[i] + " " +i);

        }
        Integer[] cont_class = new Integer[3];
        Arrays.fill(cont_class, 0);
        for (int i = 0; i < tam; i++) {
            if (a[i][4] == 1.0){
                cont_class[0]++;
            } else if(a[i][4] == 2.0){
                cont_class[1]++;
            } else if(a[i][4] == 3.0){
                cont_class[2]++;
            }
        }
        double classificacao;
        if(cont_class[0] >= cont_class[1] && cont_class[0] >= cont_class[2]){
            classificacao = 1.0;
        } else if(cont_class[1] >= cont_class[0] && cont_class[1] >= cont_class[2]){
            classificacao = 2.0;
        } else{
            classificacao = 3.0;
        }
        return classificacao;
    }
    private static void shuffleArray(Double[][] array) {
        Double temp[];
        int index;
        Random random = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            index = random.nextInt(i + 1);
            temp = array[index];
            array[index] = array[i];
            array[i] = temp;
        }
    }
}